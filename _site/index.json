{
  "FileFormat.Slides/index.html": {
    "href": "FileFormat.Slides/index.html",
    "title": "This is the HOMEPAGE. | FileFormat.Slides",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "README.html": {
    "href": "README.html",
    "title": "Presentation Management C# API System Outlines | FileFormat.Slides",
    "keywords": "Presentation Management C# API System Outlines This Documentation explains the internal structure of our Presentation Management C# API system. Despite its complexity, we've ensured the public APIs are user-friendly, providing an easy experience for manipulating PowerPoint presentations. For a more detailed understanding of our system architecture, design patterns, and public interfaces, please visit the Articles Section. FileFormat.Slides Namespace Presentation Class The primary class responsible for creating, loading, and modifying presentations. Slide Class This class represents the slides of a presentation. It deals with elements creation, updation, retrieval and deletion operations within a slide. TextShape Class This class is responsible to manage the text shapes within a slide. It allows add, update, retrieve and removing of a text shape. It allows to set text, x and y coordinates, width, height, font size, font color, font family, text alignment of a text shape. Image Class This class is providing the functions to deal with Image within a slide. It allows add, update, retrieve and removing of an image. FileFormat.Slides.Common Namespace This namespace contains all classes, enums or methods for common use. Utility Class This class provides essential static methods for generating unique relationship IDs, obtaining random slide IDs, and converting measurements. Colors Class This static class provides static properties with color codes, simplifying consistent color selection in C# applications. FileFormat.Slides.Facade Contains facade classes API Reference API Reference - In-depth information about public interfaces and usage. Technical Docs Articles - Comprehensive insights into the system architecture, design patterns, and API usage in different scenarios. Installation Install-Package FileFormat.Words System Requirements .NET Core 3.1 and above"
  },
  "api/FileFormat.Slides.Common.Colors.html": {
    "href": "api/FileFormat.Slides.Common.Colors.html",
    "title": "Class Colors | FileFormat.Slides",
    "keywords": "Class Colors Namespace FileFormat.Slides.Common Assembly FileFormat.Slides.Common.dll Common class to get the hexadecimal values of colors as string. public static class Colors Inheritance object Colors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aqua Gets the hexadecimal value for the color Aqua (00FFFF). public static string Aqua { get; } Property Value string Black Gets the hexadecimal value for the color Black (000000). public static string Black { get; } Property Value string Blue Gets the hexadecimal value for the color Blue (0000FF). public static string Blue { get; } Property Value string Cyan Gets the hexadecimal value for the color Cyan (00FFFF). public static string Cyan { get; } Property Value string Fuchsia Gets the hexadecimal value for the color Fuchsia (FF00FF). public static string Fuchsia { get; } Property Value string Gray Gets the hexadecimal value for the color Gray (808080). public static string Gray { get; } Property Value string Green Gets the hexadecimal value for the color Green (00FF00). public static string Green { get; } Property Value string Lime Gets the hexadecimal value for the color Lime (00FF00). public static string Lime { get; } Property Value string LimeGreen Gets the hexadecimal value for the color Silver (C0C0C0). public static string LimeGreen { get; } Property Value string Magenta Gets the hexadecimal value for the color Magenta (FF00FF). public static string Magenta { get; } Property Value string Maroon Gets the hexadecimal value for the color Maroon (800000). public static string Maroon { get; } Property Value string Navy Gets the hexadecimal value for the color Navy (000080). public static string Navy { get; } Property Value string Olive Gets the hexadecimal value for the color Olive (808000). public static string Olive { get; } Property Value string Orange Gets the hexadecimal value for the color Orange (FFA500). public static string Orange { get; } Property Value string Purple Gets the hexadecimal value for the color Purple (800080). public static string Purple { get; } Property Value string Red Gets the hexadecimal value for the color Red (FF0000). public static string Red { get; } Property Value string Silver Gets the hexadecimal value for the color Silver (C0C0C0). public static string Silver { get; } Property Value string Teal Gets the hexadecimal value for the color Green (008000). public static string Teal { get; } Property Value string White Gets the hexadecimal value for the color White (FFFFFF). public static string White { get; } Property Value string Yellow Gets the hexadecimal value for the color Yellow (FFFF00). public static string Yellow { get; } Property Value string"
  },
  "api/FileFormat.Slides.Common.Enumerations.FileFormatColor.html": {
    "href": "api/FileFormat.Slides.Common.Enumerations.FileFormatColor.html",
    "title": "Enum FileFormatColor | FileFormat.Slides",
    "keywords": "Enum FileFormatColor Namespace FileFormat.Slides.Common.Enumerations Assembly FileFormat.Slides.Common.dll public enum FileFormatColor Fields Black = 7 Blue = 1 Green = 2 Orange = 4 Pink = 6 Purple = 5 Red = 0 Yellow = 3"
  },
  "api/FileFormat.Slides.Common.Enumerations.TextAlignment.html": {
    "href": "api/FileFormat.Slides.Common.Enumerations.TextAlignment.html",
    "title": "Enum TextAlignment | FileFormat.Slides",
    "keywords": "Enum TextAlignment Namespace FileFormat.Slides.Common.Enumerations Assembly FileFormat.Slides.Common.dll Specifies the alignment of text elements. public enum TextAlignment Fields Center = 2 Left = 0 Right = 1"
  },
  "api/FileFormat.Slides.Common.Enumerations.html": {
    "href": "api/FileFormat.Slides.Common.Enumerations.html",
    "title": "Namespace FileFormat.Slides.Common.Enumerations | FileFormat.Slides",
    "keywords": "Namespace FileFormat.Slides.Common.Enumerations Enums TextAlignment Specifies the alignment of text elements."
  },
  "api/FileFormat.Slides.Common.FileFormatException.html": {
    "href": "api/FileFormat.Slides.Common.FileFormatException.html",
    "title": "Class FileFormatException | FileFormat.Slides",
    "keywords": "Class FileFormatException Namespace FileFormat.Slides.Common Assembly FileFormat.Slides.Common.dll Custom exception class for file format-related exceptions. public class FileFormatException : Exception, ISerializable Inheritance object Exception FileFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FileFormatException(string, Exception) Initializes a new instance of the FileFormatException class with a specified error message and a reference to the inner exception. public FileFormatException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Methods ConstructMessage(Exception, string) public static string ConstructMessage(Exception Ex, string Operation) Parameters Ex Exception Operation string Returns string"
  },
  "api/FileFormat.Slides.Common.Utility.html": {
    "href": "api/FileFormat.Slides.Common.Utility.html",
    "title": "Class Utility | FileFormat.Slides",
    "keywords": "Class Utility Namespace FileFormat.Slides.Common Assembly FileFormat.Slides.Common.dll This class provides essential static methods for generating unique relationship IDs, obtaining random slide IDs, and converting measurements. public static class Utility Inheritance object Utility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NextIndex Property to set next index for slide relationship Id. public static int NextIndex { get; set; } Property Value int SlideNextIndex public static int SlideNextIndex { get; set; } Property Value int Methods EmuToPixels(long) Function to convert EMU to Pixel public static double EmuToPixels(long emuValue) Parameters emuValue long Long value Returns double GetRandomSlideId() Function to get unique slide Id. public static uint GetRandomSlideId() Returns uint GetUniqueRelationshipId() Function to generate a unique Relationship ID public static string GetUniqueRelationshipId() Returns string PixelsToEmu(double) Function to convert Pixel valie to EMU. public static long PixelsToEmu(double pixelsValue) Parameters pixelsValue double Double value Returns long"
  },
  "api/FileFormat.Slides.Common.html": {
    "href": "api/FileFormat.Slides.Common.html",
    "title": "Namespace FileFormat.Slides.Common | FileFormat.Slides",
    "keywords": "Namespace FileFormat.Slides.Common Classes Colors Common class to get the hexadecimal values of colors as string. FileFormatException Custom exception class for file format-related exceptions. Utility This class provides essential static methods for generating unique relationship IDs, obtaining random slide IDs, and converting measurements."
  },
  "api/FileFormat.Slides.Facade.ImageFacade.html": {
    "href": "api/FileFormat.Slides.Facade.ImageFacade.html",
    "title": "Class ImageFacade | FileFormat.Slides",
    "keywords": "Class ImageFacade Namespace FileFormat.Slides.Facade Assembly FileFormat.Slides.Facade.dll public class ImageFacade Inheritance object ImageFacade Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageFacade() public ImageFacade() Properties Height public Int64Value Height { get; set; } Property Value Int64Value Image public Picture Image { get; set; } Property Value Picture ImageIndex public int ImageIndex { get; set; } Property Value int ImagePath public string ImagePath { get; set; } Property Value string ImageSlidePart public SlidePart ImageSlidePart { get; set; } Property Value SlidePart Images1 public List<ImageFacade> Images1 { get; set; } Property Value List<ImageFacade> PicturePart public ImagePart PicturePart { get; set; } Property Value ImagePart RelationshipId public string RelationshipId { get; set; } Property Value string Width public Int64Value Width { get; set; } Property Value Int64Value X public Int64Value X { get; set; } Property Value Int64Value Y public Int64Value Y { get; set; } Property Value Int64Value Methods PopulateImages(SlidePart) public static List<ImageFacade> PopulateImages(SlidePart slidePart) Parameters slidePart SlidePart Returns List<ImageFacade> RemoveImage(Picture) public void RemoveImage(Picture image) Parameters image Picture UpdateImage() public void UpdateImage() createImage(string, SlidePart) public void createImage(string imagePath, SlidePart slidePart) Parameters imagePath string slidePart SlidePart"
  },
  "api/FileFormat.Slides.Facade.PresentationDocumentFacade.html": {
    "href": "api/FileFormat.Slides.Facade.PresentationDocumentFacade.html",
    "title": "Class PresentationDocumentFacade | FileFormat.Slides",
    "keywords": "Class PresentationDocumentFacade Namespace FileFormat.Slides.Facade Assembly FileFormat.Slides.Facade.dll public class PresentationDocumentFacade : IDisposable Inheritance object PresentationDocumentFacade Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsNewPresentation public bool IsNewPresentation { get; set; } Property Value bool PresentationSlideLayoutParts public List<SlideLayoutPart> PresentationSlideLayoutParts { get; set; } Property Value List<SlideLayoutPart> PresentationSlideMasterPart public SlideMasterPart PresentationSlideMasterPart { get; set; } Property Value SlideMasterPart PresentationSlideParts public List<SlidePart> PresentationSlideParts { get; set; } Property Value List<SlidePart> PresentationThemePart public ThemePart PresentationThemePart { get; set; } Property Value ThemePart SlideFacades public List<SlideFacade> SlideFacades { get; set; } Property Value List<SlideFacade> SlideIdList public SlideIdList SlideIdList { get; set; } Property Value SlideIdList Methods AppendSlide(SlideFacade) public void AppendSlide(SlideFacade slideFacade) Parameters slideFacade SlideFacade Create(string) public static PresentationDocumentFacade Create(string FilePath) Parameters FilePath string Returns PresentationDocumentFacade CreateSlideLayoutPart() public void CreateSlideLayoutPart() Dispose() This method releases unmanaged resources. public void Dispose() Dispose(bool) This method releases unmanaged resources. protected virtual void Dispose(bool disposing) Parameters disposing bool A boolean value. ExtractAndSaveImages(string) public void ExtractAndSaveImages(string outputFolder) Parameters outputFolder string GetPresentationPart() public PresentationPart GetPresentationPart() Returns PresentationPart InsertSlide(int, SlideFacade) public void InsertSlide(int index, SlideFacade slideFacade) Parameters index int slideFacade SlideFacade MoveSlideToIndex(int, int) public void MoveSlideToIndex(int currentIndex, int newIndex) Parameters currentIndex int newIndex int Open(string) public static PresentationDocumentFacade Open(string FilePath) Parameters FilePath string Returns PresentationDocumentFacade RemoveSlide(int) public string RemoveSlide(int index) Parameters index int Returns string Save() public void Save() Save(string) public void Save(string FilePath) Parameters FilePath string getInstance() public static PresentationDocumentFacade getInstance() Returns PresentationDocumentFacade"
  },
  "api/FileFormat.Slides.Facade.SlideFacade.html": {
    "href": "api/FileFormat.Slides.Facade.SlideFacade.html",
    "title": "Class SlideFacade | FileFormat.Slides",
    "keywords": "Class SlideFacade Namespace FileFormat.Slides.Facade Assembly FileFormat.Slides.Facade.dll public class SlideFacade Inheritance object SlideFacade Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SlideFacade(bool) public SlideFacade(bool isNewSlide) Parameters isNewSlide bool Properties ImagesFacade public List<ImageFacade> ImagesFacade { get; set; } Property Value List<ImageFacade> PresentationSlide public Slide PresentationSlide { get; set; } Property Value Slide RelationshipId public string RelationshipId { get; set; } Property Value string SlideIndex public int SlideIndex { get; set; } Property Value int SlidePart public SlidePart SlidePart { get; set; } Property Value SlidePart TextShapeFacades public List<TextShapeFacade> TextShapeFacades { get; set; } Property Value List<TextShapeFacade> Methods AddImage(ImageFacade) public void AddImage(ImageFacade picture) Parameters picture ImageFacade AddTextShape(string, int, TextAlignment, long, long, long, long, string, string) public TextShapeFacade AddTextShape(string text, int fontSize, TextAlignment alignment, long _x, long _y, long width, long height, string fontFamily, string textColor) Parameters text string fontSize int alignment TextAlignment _x long _y long width long height long fontFamily string textColor string Returns TextShapeFacade"
  },
  "api/FileFormat.Slides.Facade.TextShapeFacade.html": {
    "href": "api/FileFormat.Slides.Facade.TextShapeFacade.html",
    "title": "Class TextShapeFacade | FileFormat.Slides",
    "keywords": "Class TextShapeFacade Namespace FileFormat.Slides.Facade Assembly FileFormat.Slides.Facade.dll public class TextShapeFacade Inheritance object TextShapeFacade Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextShapeFacade() public TextShapeFacade() Properties Alignment public TextAlignment Alignment { get; set; } Property Value TextAlignment AssociatedSlidePart protected SlidePart AssociatedSlidePart { get; set; } Property Value SlidePart FontFamily public string FontFamily { get; set; } Property Value string FontSize public int FontSize { get; set; } Property Value int Height public long Height { get; set; } Property Value long ShapeIndex public int ShapeIndex { get; set; } Property Value int Text public string Text { get; set; } Property Value string TextBoxShape public Shape TextBoxShape { get; set; } Property Value Shape TextColor public string TextColor { get; set; } Property Value string Width public long Width { get; set; } Property Value long X public long X { get; set; } Property Value long Y public long Y { get; set; } Property Value long Methods CreateShape() public Shape CreateShape() Returns Shape PopulateTextShapes(SlidePart) public static List<TextShapeFacade> PopulateTextShapes(SlidePart slidePart) Parameters slidePart SlidePart Returns List<TextShapeFacade> RemoveShape(SlidePart) public void RemoveShape(SlidePart slidePart) Parameters slidePart SlidePart RemoveShape(Shape) public void RemoveShape(Shape shape) Parameters shape Shape UpdateShape() public void UpdateShape() WithAlignment(TextAlignment) public TextShapeFacade WithAlignment(TextAlignment alignment) Parameters alignment TextAlignment Returns TextShapeFacade WithFontFamily(string) public TextShapeFacade WithFontFamily(string fontfamily) Parameters fontfamily string Returns TextShapeFacade WithFontSize(int) public TextShapeFacade WithFontSize(int fontSize) Parameters fontSize int Returns TextShapeFacade WithPosition(long, long) public TextShapeFacade WithPosition(long x, long y) Parameters x long y long Returns TextShapeFacade WithSize(long, long) public TextShapeFacade WithSize(long width, long height) Parameters width long height long Returns TextShapeFacade WithText(string) public TextShapeFacade WithText(string text) Parameters text string Returns TextShapeFacade WithTextColor(string) public TextShapeFacade WithTextColor(string textColor) Parameters textColor string Returns TextShapeFacade"
  },
  "api/FileFormat.Slides.Facade.html": {
    "href": "api/FileFormat.Slides.Facade.html",
    "title": "Namespace FileFormat.Slides.Facade | FileFormat.Slides",
    "keywords": "Namespace FileFormat.Slides.Facade Classes ImageFacade PresentationDocumentFacade SlideFacade TextShapeFacade"
  },
  "api/FileFormat.Slides.Image.html": {
    "href": "api/FileFormat.Slides.Image.html",
    "title": "Class Image | FileFormat.Slides",
    "keywords": "Class Image Namespace FileFormat.Slides Assembly FileFormat.Slides.dll This class represents the image within a slide. public class Image Inheritance object Image Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Image() Blank constructor to initialize the image object public Image() Image(string) Initialize the image object public Image(string imagePath) Parameters imagePath string Image path as string Properties Facade Property to get or set the ImageFacade instance. public ImageFacade Facade { get; set; } Property Value ImageFacade Height Property to get or set the height of an image. public double Height { get; set; } Property Value double ImageIndex Property to get or set the image index within the slide. public int ImageIndex { get; set; } Property Value int ImagePath Property to get or set the image path. public string ImagePath { get; set; } Property Value string Name Property to get or set the image index within the slide. public string Name { get; set; } Property Value string Width Property to get or set the width of an image. public double Width { get; set; } Property Value double X Property to get or set the X coordinate of an image. public double X { get; set; } Property Value double Y Property to get or set the Y coordinate of an image. public double Y { get; set; } Property Value double Methods GetImages(List<ImageFacade>) Method to get the list of the images within a slide public static List<Image> GetImages(List<ImageFacade> imageFacades) Parameters imageFacades List<ImageFacade> An object of ImageFacade. Returns List<Image> Remove() Method to remove the image. public void Remove() Update() public void Update()"
  },
  "api/FileFormat.Slides.Presentation.html": {
    "href": "api/FileFormat.Slides.Presentation.html",
    "title": "Class Presentation | FileFormat.Slides",
    "keywords": "Class Presentation Namespace FileFormat.Slides Assembly FileFormat.Slides.dll Represents the presentation document. public class Presentation Inheritance object Presentation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppendSlide(Slide) This method is responsible to append a slide. public void AppendSlide(Slide slide) Parameters slide Slide An object of a slide Create(string) Static method to instantiate a new object of Presentation class. public static Presentation Create(string FilePath) Parameters FilePath string Presentation path as string Returns Presentation An instance of Presentation object Examples Presentation presentation = Presentation.Create(\"D:\\\\AsposeSampleResults\\\\test2.pptx\"); TextShape shape = new TextShape(); shape.Text = \"Title: Here is my first title From FF\"; TextShape shape2 = new TextShape(); shape2.Text = \"Body : Here is my first title From FF\"; // First slide Slide slide = new Slide(); slide.AddTextShapes(shape); slide.AddTextShapes(shape2); // 2nd slide Slide slide1 = new Slide(); slide1.AddTextShapes(shape); slide1.AddTextShapes(shape2); // Adding slides presentation.AppendSlide(slide); presentation.AppendSlide(slide1); presentation.Save(); ExtractAndSaveImages(string) Extract and save images of a presentation into a director public void ExtractAndSaveImages(string outputFolder) Parameters outputFolder string Folder path as string GetSlides() Method to get the list of all slides of a presentation public List<Slide> GetSlides() Returns List<Slide> Examples Presentation presentation = Presentation.Open(\"D:\\\\AsposeSampleData\\\\sample.pptx\"); var slides = presentation.GetSlides(); var slide = slides[0]; ... InsertSlideAt(int, Slide) Method to insert a slide at a specific index public void InsertSlideAt(int index, Slide slide) Parameters index int Index of a slide slide Slide A slide object Open(string) Static method to load an existing presentation. public static Presentation Open(string FilePath) Parameters FilePath string Presentation path as string Returns Presentation Examples Presentation presentation = Presentation.Open(\"D:\\\\AsposeSampleData\\\\sample.pptx\"); TextShape shape1 = new TextShape(); shape1.Text = \"Title: Here is my first title From FF\"; TextShape shape2 = new TextShape(); shape2.Text = \"Body : Here is my first title From FF\"; // New slide Slide slide = new Slide(); slide.AddTextShapes(shape1); slide.AddTextShapes(shape2); // Adding slide presentation.AppendSlide(slide); presentation.Save(); RemoveSlide(int) Method to remove a slide at a specific index public string RemoveSlide(int slideIndex) Parameters slideIndex int Index of a slide Returns string Examples Presentation presentation = Presentation.Open(\"D:\\\\AsposeSampleData\\\\sample.pptx\"); var confirmation = presentation.RemoveSlide(0); Console.WriteLine(confirmation); presentation.Save(); Save() Method to save the new or changed presentation. public void Save()"
  },
  "api/FileFormat.Slides.Slide.html": {
    "href": "api/FileFormat.Slides.Slide.html",
    "title": "Class Slide | FileFormat.Slides",
    "keywords": "Class Slide Namespace FileFormat.Slides Assembly FileFormat.Slides.dll Represents the slide object within a presentatction public class Slide Inheritance object Slide Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Slide() Constructor for the Slide class. public Slide() Remarks it intializes the Slide Facade set the slide index and intializes the lists of text shapes and images. Slide(bool) public Slide(bool isNewSlide) Parameters isNewSlide bool Properties Images Property contains the list of all images within a slide. public List<Image> Images { get; set; } Property Value List<Image> RelationshipId Property for the relationship Id. public string RelationshipId { get; set; } Property Value string SlideFacade Property for respective Slide Facade. public SlideFacade SlideFacade { get; set; } Property Value SlideFacade SlideIndex Property to hold the index of the slide. public int SlideIndex { get; set; } Property Value int TextShapes Property contains the list of all text shapes. public List<TextShape> TextShapes { get; set; } Property Value List<TextShape> Methods AddImage(Image) Method to add images to a slide. public void AddImage(Image image) Parameters image Image An object of Image class AddTextShapes(TextShape) Method to add a text shape in a slide. public void AddTextShapes(TextShape textShape) Parameters textShape TextShape An object of TextShape class. GetTextShapesByText(string) Get text shapes by searching a text term. public List<TextShape> GetTextShapesByText(string text) Parameters text string Search term as string Returns List<TextShape>"
  },
  "api/FileFormat.Slides.TextShape.html": {
    "href": "api/FileFormat.Slides.TextShape.html",
    "title": "Class TextShape | FileFormat.Slides",
    "keywords": "Class TextShape Namespace FileFormat.Slides Assembly FileFormat.Slides.dll This class represents the text shape within a slide. public class TextShape Inheritance object TextShape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextShape() Constructor of the TextShape class inititalizes the object of TextShapeFacade and populate its fields. public TextShape() Properties Alignment Property to get or set alignment of the shape. public TextAlignment Alignment { get; set; } Property Value TextAlignment Facade Property to get or set the TextShapeFacade. public TextShapeFacade Facade { get; set; } Property Value TextShapeFacade FontFamily Property to get or set the font family of the text shape. public string FontFamily { get; set; } Property Value string FontSize Property to set or get the font size of the Text Shape. public int FontSize { get; set; } Property Value int Height Property to get or set height of the shape. public double Height { get; set; } Property Value double ShapeIndex Property to get or set the shape index within a slide. public int ShapeIndex { get; set; } Property Value int Text Property to set or get the text of the shape. public string Text { get; set; } Property Value string TextColor Property to get or set the text color of the text shape. public string TextColor { get; set; } Property Value string Width Property to get or set width of the shape. public double Width { get; set; } Property Value double X Property to get or set X coordinate of the shape public double X { get; set; } Property Value double Y Property to get or set Y coordinate of the shape. public double Y { get; set; } Property Value double Methods GetTextShapes(List<TextShapeFacade>) Method for getting the list of text shapes. public static List<TextShape> GetTextShapes(List<TextShapeFacade> textShapeFacade) Parameters textShapeFacade List<TextShapeFacade> An object of TextShapeFacade. Returns List<TextShape> Remove() Method to remove the textshape of a slide. public void Remove() Update() public void Update()"
  },
  "api/FileFormat.Slides.html": {
    "href": "api/FileFormat.Slides.html",
    "title": "Namespace FileFormat.Slides | FileFormat.Slides",
    "keywords": "Namespace FileFormat.Slides Classes Image This class represents the image within a slide. Presentation Represents the presentation document. Slide Represents the slide object within a presentatction TextShape This class represents the text shape within a slide."
  },
  "docs/design.html": {
    "href": "docs/design.html",
    "title": "FileFormat.Slides API Architecture Overview | FileFormat.Slides",
    "keywords": "FileFormat.Slides API Architecture Overview The FileFormat.Slides API is designed to simplify PowerPoint presentation creation, manipulation, and customization using the OpenXML SDK. It consists of two primary layers, each serving distinct purposes for enhanced code organization and reusability. 1. FileFormat.Slides.Facade The Facade layer acts as a high-level interface, providing a simplified entry point. It encapsulates OpenXML SDK details and exposes streamlined functionalities for working with PowerPoint presentations. Key components include: PresentationDocumentFacade: Facade for interacting with presentations, offering clean APIs for creation and modification. SlideFacade: Represents an individual slide, enabling efficient content and layout manipulation. ThemeFacade: Manages presentation themes, allowing users to customize visual styles. These facade classes shield developers from OpenXML intricacies, promoting a more enjoyable experience. 2. FileFormat.Slides The Slides layer contains core functionalities and classes for low-level interactions with OpenXML SDK. Key components include: Presentation: Creates, opens, and saves presentation documents. Slide: Manages slides related operations like, adding, retrieving, removing or updating a slide. TextShape: Manages the text objects within a slide. Images: Manages CRUD operations of an image object within a slide. Design Patterns FileFormat.Slides API embraces several design patterns: Facade Pattern: Simplifies the API's interface, providing a unified entry point. Factory Pattern: Creates instances of complex objects for modularity. Singleton Pattern: Ensures a single instance of main presentation. Strategy Pattern: Utility classes employ strategies for tasks like relationship ID generation. The combination of these design patterns results in a powerful, user-friendly, and extensible API for working with PowerPoint presentations in C#."
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Understanding C# Slides API - FileFormat.Slides for .NET | FileFormat.Slides",
    "keywords": "Understanding C# Slides API - FileFormat.Slides for .NET Overview FileFormat.Slides for .NET is an open-source API empowering developers to seamlessly handle PowerPoint slides in their .NET applications. Featuring a user-friendly API, it simplifies slide creation, loading, and manipulation, serving as a valuable tool for presentation automation and customization. Whether your goal is to generate presentations, automate slide creation, extract data from slides, or perform advanced formatting tasks, FileFormat.Slides equips you with the necessary tools and capabilities. It abstracts the complexities of working with slides, enabling developers to focus on their application logic rather than the intricacies of slide processing. System Requirements To utilize this software, ensure your system meets the following requirements: .NET Core 3.1 and above: The application is built on the .NET Core framework, specifically targeting version 3.1 and newer. Make sure you have .NET Core installed on your machine before proceeding. Installation Instructions for .NET Core 3.1: For detailed instructions on installing .NET Core 3.1, visit Microsoft's .NET Download page. Compatibility Note: The API is compatible with later .NET Framework versions starting from .NET Core 3.1. Installation FileFormat.Slides is available as a NuGet Package and can be installed in one of the following ways. Choose the installation method that best fits your workflow and project requirements. Install via Nuget Console To install FileFormat.Slides to the current directory using the Nuget Console, ensure you have the Nuget CLI installed. Execute the following command: nuget install FileFormat.Slides ./OutputDir Visual Studio Package Manager Open Visual Studio. Go to (Tools > NuGet Package Manager > Package Manager Console). In the Browse tab, search for FileFormat.Slides. Select the version and click \"Install\" to add it to your project. Install-Package FileFormat.slides Install from within Visual Studio Open Visual Studio. Go to Tools > NuGet Package Manager > Manage NuGet Packages for Solution. In the Browse tab, search for FileFormat.Slides. Select the desired version and click \"Install\" to add it to your project."
  },
  "docs/introopenxmlsdk.html": {
    "href": "docs/introopenxmlsdk.html",
    "title": "Understanding OpenXML for PowerPoint Presentations | FileFormat.Slides",
    "keywords": "Understanding OpenXML for PowerPoint Presentations Creating captivating PowerPoint presentations often involves understanding the underlying technologies that power the creation and manipulation of slides. One such technology is OpenXML, an open standard for word processing documents, spreadsheets, and presentations. In this article, we'll delve into how OpenXML is used for PowerPoint presentations, exploring its API to demystify the process. The Power of OpenXML API OpenXML provides a powerful API for working with PowerPoint presentations in .NET applications. It allows developers to programmatically create, modify, and customize slides, layouts, and formatting. The API exposes a range of functionalities that enable precise control over the elements within a presentation. Usage of API for Presentation Creation To create a presentation using the OpenXML API, developers typically follow these steps: Initialize a Presentation Document: Start by creating a new presentation document. PresentationDocument presentationDocument = PresentationDocument.Create(\"Presentation.pptx\", PresentationDocumentType.Presentation); Add Slides and Content: Utilize the API to add slides, set layouts, and add content such as text, images, and shapes. SlidePart slidePart = presentationDocument.PresentationPart.AddNewPart<SlidePart>(); Slide slide = new Slide(new CommonSlideData(new ShapeTree(new TextBody(new Paragraph(new Run(new Text(\"Hello, OpenXML!\")))))))); slide.Save(slidePart); Customize Formatting: Adjust formatting options such as fonts, colors, and styles to meet specific design requirements. RunProperties runProperties = new RunProperties(new Bold(), new Color() { Rgb = \"FF0000\" }); Save and Close: Save the changes made to the presentation and close the document. presentationDocument.Save(); presentationDocument.Close(); Complexity Compared to Other APIs While OpenXML offers extensive control and flexibility, it is acknowledged for its complexity, especially in comparison to higher-level, more abstracted APIs. Here's why: Low-Level Control: OpenXML operates at a lower level, providing granular control over document elements. This level of control can be overwhelming for developers seeking a simpler, more abstracted approach. Learning Curve: Due to its low-level nature, mastering OpenXML requires a deeper understanding of the underlying XML structure of Office documents. This learning curve can be steeper compared to APIs that provide more abstraction. Verbose Syntax: OpenXML syntax can be verbose, involving a considerable amount of code for even basic operations. This verbosity can make code harder to read and maintain. Fine-Grained Manipulation: While fine-grained control is a strength, it can also be a drawback for developers looking for quick and easy solutions. Other APIs may offer simpler methods for common tasks. In conclusion, while OpenXML for PowerPoint presentations provides unparalleled control and customization, its complexity may be considered a trade-off. Developers choosing OpenXML should weigh the benefits of precision and control against the learning curve and verbosity, opting for the approach that aligns with their specific project requirements."
  },
  "index.html": {
    "href": "index.html",
    "title": "C# Slides API - FileFormat.Slides Docs | FileFormat.Slides",
    "keywords": "C# Slides API - FileFormat.Slides Docs Explore the Basics Welcome to FileFormat.Slides, your go-to helper for handling PowerPoint slides in C#! Whether you're creating, loading, or tweaking slides, this API makes it super easy. Immerse Yourself in the API Documentation Discover the nitty-gritty details of FileFormat.Slides in our API Reference. It's like the instruction manual for using this fantastic tool. Let's Talk Architecture Ever wondered how things work behind the scenes? Our system architecture is like the superhero blueprint, ensuring smooth slide handling. Check out our Articles section to explore the ins and outs. Unleash OpenXML SDK Mastery Our powerhouse, OpenXML SDK, is the tech wizard behind the scenes, orchestrating PowerPoint brilliance. Ready to elevate your FileFormat.Slides expertise? Dive into pro-level insights for seamless PowerPoint mastery!"
  }
}